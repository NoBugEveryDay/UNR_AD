include(FortranCInterface)
FortranCInterface_VERIFY()

file(GLOB c_src *.c *.h)
add_library(c_binding STATIC ${c_src})

target_include_directories(c_binding PRIVATE ${MPI_C_INCLUDE_PATH})
target_link_libraries(c_binding ${MPI_C_LIBRARIES})

find_package(HDF5 REQUIRED)
target_include_directories(c_binding PRIVATE ${HDF5_C_INCLUDE_DIRS})
target_link_libraries(c_binding ${HDF5_C_LIBRARIES})

if(USE_CUDA)
    target_compile_definitions(c_binding PRIVATE -D_CUDA)
endif()

if(USE_OMP)
    find_package(OpenMP)
    target_include_directories(c_binding PUBLIC ${OpenMP_C_INCLUDE_DIRS})
    target_link_libraries(c_binding ${OpenMP_C_LIBRARIES})
    # target_compile_options(c_binding PUBLIC ${OpenMP_C_FLAGS})
    # target_link_options(c_binding PUBLIC ${OpenMP_C_FLAGS})
    if(USE_OMP_OFFLOAD)
        target_compile_options(c_binding PUBLIC "-DUSE_OMP_OFFLOAD")
        if(OMP_INTEL_OFFLOAD)
            target_compile_options(c_binding PUBLIC "-fiopenmp")
            target_compile_options(c_binding PUBLIC "-fopenmp-targets=spir64")
            target_link_options(c_binding PUBLIC "-fiopenmp")
            target_link_options(c_binding PUBLIC "-fopenmp-targets=spir64")
        else()
            target_compile_options(c_binding PUBLIC "-foffload=nvptx-none")
            target_link_options(c_binding PUBLIC "-foffload=nvptx-none")
        endif()
    else()
        target_compile_options(c_binding PUBLIC "-qopenmp")
        target_link_options(c_binding PUBLIC "-qopenmp")
    endif()
endif()

if(USE_PDD)
    target_compile_definitions(c_binding PRIVATE -D_PDD)
endif()

if(USE_SP_POIS)
    target_compile_definitions(c_binding PRIVATE -DSP_POIS)
endif()

target_compile_definitions(c_binding PRIVATE -D_PRECALC_TRID_COEFF)

if(USE_MKL)
    target_compile_definitions(c_binding PRIVATE -DUSE_MKL)
    target_link_libraries(c_binding mkl_intel_lp64 mkl_sequential mkl_core)
elseif(USE_KMLFFT)
    target_compile_definitions(c_binding PRIVATE -DUSE_KMLFFT)
    target_include_directories(c_binding PRIVATE $ENV{KML_INC})
else()
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(FFTW3 REQUIRED fftw3 IMPORTED_TARGET)
    target_include_directories(c_binding PRIVATE ${FFTW3_INCLUDE_DIRS})
    target_link_directories(c_binding PRIVATE ${FFTW3_LIBRARY_DIRS})
    target_link_libraries(c_binding ${FFTW3_LIBRARIES})
endif()

if(USE_GPTL)
    pkg_search_module(GPTL REQUIRED gptl)
    target_include_directories(c_binding PRIVATE ${GPTL_INCLUDE_DIRS})
    target_link_directories(c_binding PRIVATE ${GPTL_LIBRARY_DIRS})
    target_link_libraries(c_binding ${GPTL_LIBRARIES})
    target_compile_definitions(c_binding PRIVATE -DGPTL)
endif()

if(USE_RDMA)
    target_compile_definitions(c_binding PRIVATE -DUSE_RDMA)
    if(USE_TH2A)
        target_compile_definitions(c_binding PRIVATE -DUSE_TH2A)
        target_include_directories(c_binding PRIVATE /usr/local/glex/include)
    elseif(USE_IBV)
        target_compile_definitions(c_binding PRIVATE -DUSE_IBV)
    endif()
endif()

if(USE_NBHALO)
    target_compile_definitions(c_binding PRIVATE -DNB_HALO)
    if(USE_NBHALOBUF)
        target_compile_definitions(c_binding PRIVATE -DUSE_NBHALOBUF)
    endif()
endif()